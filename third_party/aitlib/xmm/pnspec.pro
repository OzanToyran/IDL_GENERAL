PRO pnspec,spectrum,rawspectrum=rawspectrum,auxfile=auxfile, $
           pnfile=pnfile,chatty=chatty,exposure=exposure,rawx=rawx, $
           rawy=rawy,nosplitcorr=nosplitcorr,timemode=timemode
;+
; NAME:
;          pnspec
;
;
; PURPOSE:
;          read an EPIC pn SciSim FITS file (generated by running
;          podf on the output of SciSim), reconstruct the split
;          events, and return the correct EPIC pn spectrum
;
;
; CATEGORY:
;          IAAT XMM Tools
;
;
; CALLING SEQUENCE:
;          readpn,spectrum,rawspectrum=rawspectrum,auxfile=auxfile, $
;          pnfile=pnfile,chatty=chatty,exposure=exposure
;
; 
; INPUTS:
;          auxfile: file containing the auxilliary information (usually
;                   called pn_aux.fits
;          pnfile : file containing the CCD events (e.g.,
;                    pn_ccd1.fits)
;
; KEYWORD PARAMETERS:
;          chatty : if set, give some debugging information
;          nosplitcorr : if set, no split-event correction is performed
;          timemode : if set, the simulation used the Timingmode, 
;                     default is the imaging mode.
;
;
; OUTPUTS:
;          spectrum: the binned spectrum (photons/channel)
;
;
; OPTIONAL OUTPUTS:
;          rawspectrum: the binned spectrum, uncorrected for splits
;          rawx: the x-coordinates of the events
;          rawy: the y-coordinates of the events
;          exposure: exposure time of the observation
;
;
; COMMON BLOCKS:
;          none
;
;
; SIDE EFFECTS:
;
; RESTRICTIONS:
;          * For the purpose of this subroutine, ``Split events'' are
;            defined as all those events happening simultaneously (=in
;            the same time frame) AND within 1 pixel to each other. No
;            effort is taken to account for split events where more
;            than two pixels contribute. Beware in the case of bright
;            sources, where more than photon might get detected during
;            the readout of one frame. These can look like splits
;
; PROCEDURE:
;
;
;
; EXAMPLE:
;
;
;
; MODIFICATION HISTORY:
;          Version 0.1, 1999/03/16, Joern Wilms
;                                   (wilms@astro.uni-tuebingen.de)
;                  0.11 1999/03/24, Ingo Kreykenbohm
;                                   (kreyken@astro.uni-tuebingen.de)
;                  0.12 1999/03/25, Joern Wilms, IK
;                                    removed patch_broken_fits
;                  0.13 1999/03/26, Ingo Kreykenbohm
;                                   now TIMING mode works
;-
   
   ;; preset keywords
   IF (n_elements(auxfile) EQ 0) THEN auxfile='pn_aux.fits'
   IF (n_elements(pnfile) EQ 0) THEN auxfile='pn_ccd1.fits'
   IF (n_elements(nosplitcorr) EQ 0) THEN nosplitcorr=0
   
   ;; number of channels in spectrum
   nchan=4096 ;; a la reporter2pha
   spectrum=intarr(nchan)
   rawspectrum=intarr(nchan)
   
   ;;
   ;; Read the PN CCD Info
   ;;
   
   IF (keyword_set(chatty)) THEN BEGIN 
       print,'Reading event file '+pnfile
   ENDIF 
   
   IF (NOT file_exist(pnfile)) THEN BEGIN 
       print,'File does not exist '+pnfile
       return
   ENDIF 
   
   IF (keyword_set(timemode)) THEN BEGIN 
       IF (keyword_set(chatty)) THEN print,'Using TIMING Mode'
       fxbopen,unit,pnfile,'PNTIE1',header
   END ELSE BEGIN 
       IF (keyword_set(chatty)) THEN print,'Using IMAGING mode'
       fxbopen,unit,pnfile,'PNIME1',header
   END 
   
   ;; check whether file contains any data
   naxis2=0
   getpar,header,'NAXIS2',naxis2
   IF (naxis2 EQ 0) THEN BEGIN 
       print,'File does not contain any data, returning zero'
       fxbclose,unit
       return
   ENDIF 
   
   fxbread,unit,frame,'FRAME'
   fxbread,unit,rawx,'RAWX'
   fxbread,unit,rawy,'RAWY'
   fxbread,unit,rawchannel,'ENERGY'

   fxbclose,unit
   
   
   channel=rawchannel
   
   
   ;;
   ;; The aux-file contains the relation between the frame counters
   ;; and the frame time
   ;;
   IF (NOT keyword_set(nosplitcorr)) THEN BEGIN 
       IF (keyword_set(chatty)) THEN BEGIN 
           print,'Reading auxilliary file '+auxfile
       ENDIF 
       
       fxbopen,unit,auxfile,'PNAUX1',header
   
       fxbread,unit,framebase,'FRAME'
       fxbread,unit,cycle,'CYCLE'
       fxbread,unit,ftcoarse,'FTCOARSE'
       ftcoarse=long(ftcoarse)
       fxbread,unit,ftfine,'FTFINE'
       
       ;; quadrant and ccdid are ignored for the moment
       
       fxbclose,unit
       
       ;; correct for broken data size of ftcoarse in SciSim
       ;; (results in integer overflows)
       ;; assumes there is only one wrap around, i.e. max. observation
       ;; duration of ~70 ksec.
       ndx=where(ftcoarse EQ -32767)
       IF (ndx[0] NE -1) THEN BEGIN 
           len=n_elements(ftcoarse)
           ftcoarse[ndx[0]:len-1]=ftcoarse[ndx[0]:len-1]+65535L
       ENDIF 
       
       ;; assuming ftfine is in units of 1msec
       ;; (should be in units of 15musec).
       frametime=ftcoarse+double(ftfine)*0.001D0
       
       
          
       ;;
       ;; Stupid case of ONE event on the CCD
       ;;
       IF (n_elements(frame) LT 2) THEN BEGIN 
           exposure=max(frametime)
           spectrum[channel]=1
           rawspectrum=spectrum
           return
       ENDIF 
          
       ;; we'll assume that all events in the same frame are split events
       ndx=where(shift(frame,-1) eq frame,nsplit)
       IF (keyword_set(chatty)) THEN BEGIN 
           print,'Checking '+strtrim(nsplit,2)+' events'
       ENDIF 
       
       IF (nsplit GT 0) THEN BEGIN 
           ndx1=ndx+1
           
           ;; split events: adjacent pixels!
           nd=where(abs(fix(rawx[ndx])-fix(rawx[ndx1])) LT 2 AND $
                    abs(fix(rawy[ndx])-fix(rawy[ndx1])) LT 2,nsplit)
           IF (keyword_set(chatty)) THEN BEGIN 
               print,'   found '+strtrim(nsplit,2)+' real splits'
           ENDIF 
           IF (nsplit GT 0) THEN split=ndx(nd)
           
           ;; combine split events
           channel[split]=channel[split]+channel[split+1]
           channel[split+1]=-1
           ;; and remove them from the image
           rawx[split+1]=0
           rawy[split+1]=0
       ENDIF 
   ENDIF 

   ;; Build histogram 
   IF (keyword_set(chatty)) THEN BEGIN 
       print,'Binning spectrum'
   ENDIF 
   
   FOR i=1,nchan DO BEGIN 
       ;; split corrected spectrum
       dummy=where(channel EQ i,nch)
       spectrum[i-1]=nch
       ;; the spectrum including the raw data
       dummy=where(rawchannel EQ i,nch)
       rawspectrum[i-1]=nch
   END 
   IF (keyword_set(nosplitcorr)) THEN exposure=0. ELSE exposure=max(frametime)

END 
